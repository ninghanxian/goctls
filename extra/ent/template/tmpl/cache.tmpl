{{/*
Copyright 2022-present Ryan SU (github.com/qmcloud). All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}
{{- /*gotype: entgo.io/ent/entc/gen.Graph*/ -}}

{{ define "cache" }}
	{{/* Add the base header for the generated file */}}
	{{ $pkg := base $.Config.Package }}
	{{ template "header" $ }}

	import (
		"github.com/redis/go-redis/v9"
	)

	{{/* Loop over all updaters and implement the "SetOrClear" method for all optional fields */}}
	{{ range $n := $.Nodes }}
		{{ $dbPrefix := print "DB:CACHE:"}}
		// GetCache returns a {{$n.Name}} entity by its id, use cache if it exists.
		func ({{ receiver $n.QueryName }} *{{ $n.QueryName }}) GetCache(ctx context.Context, rds redis.UniversalClient, predicates predicate.{{$n.Name}}, keyVal string, expire time.Duration, {{ if ne $n.Edges nil }} loadEdges ... string{{ end }} ) (*{{ $n.Name }}, error) {
			var key strings.Builder
			key.WriteString("{{$dbPrefix}}{{$n.Name}}:")
			key.WriteString(keyVal)

			cacheData, err := rds.Get(ctx, key.String()).Result()

			if errors.Is(err, redis.Nil) {
				var data *{{ $n.Name }}
{{ if ne $n.Edges nil }}
				query := {{ receiver $n.QueryName }}.Where(predicates)

				for _, edge := range loadEdges {
					switch edge {
					{{- range $e := $n.Edges }}
					case "{{$e.StructField}}":
					query.{{ print "With" $e.StructField }}(){{end}}
					}
				}

				data, err = query.Only(ctx)
{{else}}
				data, err = {{ receiver $n.QueryName }}.Where(predicates).Only(ctx)
				if err != nil {
					return nil, err
				}
{{end}}

				m, err := json.Marshal(data)
				if err != nil {
					return nil, err
				}

				err = rds.Set(ctx, key.String(), m, expire).Err()
				if err != nil {
					return nil, err
				}

				return data, err
			} else if err != nil {
				return nil, err
			}

			result := &{{$n.Name}}{}

			err = json.Unmarshal([]byte(cacheData), result)
			if err != nil {
				return nil, err
			}

			return result, err
		}

		// DelCache delete the {{$n.Name}} redis cache of specific key
		func ({{ receiver $n.QueryName }} *{{ $n.QueryName }}) DelCache(ctx context.Context, rds *redis.Client, keyVal string) error {
			var key strings.Builder
			key.WriteString("{{$dbPrefix}}{{$n.Name}}:")
			key.WriteString(keyVal)

			err := rds.Del(ctx, key.String()).Err()
			if err != nil {
				return err
			}

			return err
		}

	{{ end }}
{{ end }}
